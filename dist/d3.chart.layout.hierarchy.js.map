{"version":3,"sources":["webpack://d3.chart.layout.hierarchy/webpack/universalModuleDefinition","webpack://d3.chart.layout.hierarchy/webpack/bootstrap","webpack://d3.chart.layout.hierarchy/external \"d3\"","webpack://d3.chart.layout.hierarchy/external \"d3.chart\"","webpack://d3.chart.layout.hierarchy/./hierarchy/hierarchy.js","webpack://d3.chart.layout.hierarchy/./hierarchy/cluster-tree.js","webpack://d3.chart.layout.hierarchy/./hierarchy/cluster-tree.cartesian.js","webpack://d3.chart.layout.hierarchy/./tree/tree.cartesian.js","webpack://d3.chart.layout.hierarchy/./hierarchy/cluster-tree.radial.js","webpack://d3.chart.layout.hierarchy/./tree/tree.radial.js","webpack://d3.chart.layout.hierarchy/./treemap/treemap.js","webpack://d3.chart.layout.hierarchy/./pack/pack.flattened.js","webpack://d3.chart.layout.hierarchy/./pack/pack.nested.js","webpack://d3.chart.layout.hierarchy/./partition/partition.arc.js","webpack://d3.chart.layout.hierarchy/./partition/partition.rectangle.js"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__1__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","external_d3_","initialize","chart","this","d3","layers","_features","base","attr","node","parentElement","clientWidth","clientHeight","zoom","append","_name","_value","duration","_duration","on","layout","walker","parent","walkerFunction","childrenFunction","children","count","length","_","arguments","trigger","draw","zoomable","extent","Infinity","scaleExtent","translate","scale","sort","a","b","_isFeatureEnabled","featureName","_setFeatureEnabled","isEnabled","extend","counter","radius","_radius","_width","_height","links","classed","nodes","layer","dataBind","data","selectAll","_id","insert","events","enter","_initNode","text","style","event","merge","undefined","_children","select","isLeaf","merge:transition","exit:transition","remove","target","x","source","x0","y","y0","diagonal","path","collapsible","depth","once","collapse","toggle","_internalUpdate","forEach","margin","_margin","levelGap","_levelGap","projection","left","right","top","bottom","transform","_getNodes","reverse","dimension","nodeSize","_nodeSize","size","tree","diameter","_diameter","Math","min","radial","PI","separation","treemap","color","category20c","dx","dy","w","getComputedTextLength","round","sticky","linear","range","kx","ky","domain","t","transition","pack","flatten","_flatten","formats","_formats","filter","fill","substring","title","padding","format","k","partition","sqrt","arc","startAngle","max","endAngle","innerRadius","outerRadius","paths","attrTween","xd","yd","yr","arcTween"],"mappings":"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","file":"d3.chart.layout.hierarchy.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"d3\"), require(\"d3.chart\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"d3.chart.layout.hierarchy\", [\"d3\", \"d3.chart\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"d3.chart.layout.hierarchy\"] = factory(require(\"d3\"), require(\"d3.chart\"));\n\telse\n\t\troot[\"d3.chart.layout.hierarchy\"] = factory(root[\"d3\"], root[\"d3.chart\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__, __WEBPACK_EXTERNAL_MODULE__1__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","import * as d3 from 'd3';\nimport 'd3.chart';\n\nd3.chart(\"hierarchy\", {\n\n  initialize: function() {\n    var chart = this;\n\n    chart.d3      = {};\n    chart.layers  = {};\n\n    // List of enabled features. They are only used to check whether a feature\n    // was already enabled, to avoid multiple event handler bindings etc.\n    this._features = {};\n\n    // Set width and height attributes only if they weren't set explicitly\n    if (!chart.base.attr(\"width\"))\n      chart.base.attr(\"width\",  this.base.node().parentElement.clientWidth);\n\n    if (!chart.base.attr(\"height\"))\n      chart.base.attr(\"height\", this.base.node().parentElement.clientHeight);\n\n    chart.d3.zoom = d3.behavior.zoom();\n    chart.layers.base = chart.base.append(\"g\");\n\n    chart.name(chart._name         || \"name\");\n    chart.value(chart._value       || \"value\");\n    chart.duration(chart._duration || 750);\n\n\n\n    chart.on(\"change:value\", function() {\n      chart.d3.layout.value(function(d) { return chart._value === \"_COUNT\" ? 1 : d[chart._value]; });\n    });\n\n\n    // http://bl.ocks.org/robschmuecker/7926762\n    chart.walker = function(parent, walkerFunction, childrenFunction) {\n      if( ! parent ) {\n        return;\n      }\n\n      walkerFunction(parent);\n\n      var children = childrenFunction(parent);\n      if( children ) {\n        for( var count = children.length, i = 0; i < count; i++ ) {\n          chart.walker( children[i], walkerFunction, childrenFunction );\n        }\n      }\n    };\n  },\n\n\n  name: function(_) {\n    if( ! arguments.length ) {\n      return this._name;\n    }\n\n    this._name = _;\n\n    this.trigger(\"change:name\");\n    if( this.root ) {\n      this.draw(this.root);\n    }\n\n    return this;\n  },\n\n\n  value: function(_) {\n    if( ! arguments.length ) {\n      return this._value;\n    }\n\n    this._value = _;\n\n    this.trigger(\"change:value\");\n    if( this.root ) {\n      this.draw(this.root);\n    }\n\n    return this;\n  },\n\n\n  duration: function(_) {\n    if( ! arguments.length ) {\n      return this._duration;\n    }\n\n    this._duration = _;\n\n    this.trigger(\"change:duration\");\n    if( this.root ) {\n      this.draw(this.root);\n    }\n\n    return this;\n  },\n\n\n  zoomable: function(_) {\n    var chart = this;\n\n    var extent = _ || [0, Infinity];\n\n    function zoom() {\n      chart.layers.base\n        .attr(\"transform\", \"translate(\" + d3.event.translate + \")\" + \" scale(\" + d3.event.scale + \")\");\n    }\n\n    chart.base.call(chart.d3.zoom.scaleExtent(extent).on(\"zoom\", zoom));\n\n    return chart;\n  },\n\n\n  sort: function(_) {\n    var chart = this;\n\n    if( _ === \"_ASC\" ) {\n      chart.d3.layout.sort(function(a, b) { return d3.ascending(a[chart._name], b[chart._name] ); });\n    } else if( _ === \"_DESC\" ) {\n      chart.d3.layout.sort(function(a, b) { return d3.descending(a[chart._name], b[chart._name] ); });\n    } else {\n      chart.d3.layout.sort(_);\n    }\n\n    return chart;\n  },\n\n\n  /**\n   * Checks whether specified feature was already enabled. Used to prevent\n   * multiple event bindings.\n   *\n   * @param featureName Name of the feature.\n   */\n  _isFeatureEnabled: function(featureName) {\n    return this._features[featureName];\n  },\n\n\n  /**\n   * Marks feature as enabled of disabled. Should be used in functions that\n   * control certain features.\n   *\n   * @param featureName Name of the feature.\n   * @param isEnabled Feature status to set: true - mark feature as enabled,\n   *                  false - mark as disabled.\n   */\n  _setFeatureEnabled: function(featureName, isEnabled) {\n    this._features[featureName] = isEnabled;\n  }\n});\n\n\n","import * as d3 from 'd3';\nimport 'd3.chart';\nimport './hierarchy';\n\nd3.chart(\"hierarchy\").extend(\"cluster-tree\", {\n\n  initialize : function() {\n\n    var chart = this;\n\n    var counter = 0;\n\n    chart.radius(chart._radius || 4.5);\n\n    chart._width  = chart.base.attr(\"width\");\n    chart._height = chart.base.attr(\"height\");\n\n    chart.layers.links = chart.layers.base.append(\"g\").classed(\"links\", true);\n    chart.layers.nodes = chart.layers.base.append(\"g\").classed(\"nodes\", true);\n\n\n    chart.layer(\"nodes\", chart.layers.nodes, {\n\n      dataBind: function(data) {\n        return this.selectAll(\".node\").data(data, function(d) {\n          return d._id || (d._id = ++counter);\n        });\n      },\n\n      insert: function() {\n        return this.append(\"g\")\n          .classed(\"node\", true);\n      },\n\n      events: {\n        \"enter\": function() {\n          chart._initNode(this);\n\n          this.append(\"circle\")\n            .attr(\"r\", 0);\n\n          this.append(\"text\")\n            .attr(\"dy\", \".35em\")\n            .text(function(d) { return d[chart._name]; })\n            .style(\"fill-opacity\", 0);\n\n          this.on(\"click\", function (event) {\n            chart.trigger(\"click:node\", event);\n          });\n        },\n\n        \"merge\": function() {\n          // Set additional node classes as they may change during manipulations\n          // with data. For example, a node is added to another leaf node, so\n          // ex-leaf node should change its class from node-leaf to node-parent.\n          chart._initNode(this);\n\n          // Function .classed() is not available in transition events.\n          this.classed('node-collapsed', function (d) {\n            return d._children !== undefined;\n          });\n\n\n          this.select(\"text\")\n            .attr(\"x\", function(d) {\n              return d.isLeaf ? 10 : -10;\n            })\n            // TODO: fix weird animation due to change text-anchor.\n            .attr(\"text-anchor\", function(d) {\n              return d.isLeaf ? \"start\" : \"end\";\n            });\n        },\n\n        \"merge:transition\": function() {\n          this.select(\"circle\")\n            .attr(\"r\", chart._radius);\n\n          this.select(\"text\")\n            .style(\"fill-opacity\", 1);\n        },\n\n        \"exit:transition\": function() {\n          this.duration(chart._duration)\n            .remove();\n\n          this.select(\"circle\")\n            .attr(\"r\", 0);\n\n          this.select(\"text\")\n            .style(\"fill-opacity\", 0);\n        }\n      }\n    });\n\n\n    chart.layer(\"links\", chart.layers.links, {\n      dataBind: function(data) {\n        return this.selectAll(\".link\")\n          .data(chart.d3.layout.links(data), function(d) { return d.target._id; });\n      },\n\n      insert: function() {\n        return this.append(\"path\").classed(\"link\", true);\n      },\n\n      events: {\n        \"enter\": function() {\n          this\n            .attr(\"d\", function(d) {\n              var o = { x: chart.source.x0, y: chart.source.y0 };\n              return chart.d3.diagonal({ source: o, target: o });\n            });\n        },\n\n        \"merge:transition\": function() {\n          this.duration(chart._duration)\n            .attr(\"d\", chart.d3.diagonal)\n            .attr(\"stroke\", function(d) { return d.source.path && d.target.path ? \"#dd7b7b\" : \"#ccc\"; })\n            .style(\"stroke-width\", function(d) { return d.path ? 1 : 1.5; });\n        },\n\n        \"exit:transition\": function() {\n          this.duration(chart._duration)\n            .attr(\"d\", function(d) {\n              var o = { x: chart.source.x, y: chart.source.y };\n              return chart.d3.diagonal({ source: o, target: o });\n            })\n            .remove();\n        }\n      }\n    });\n  },\n\n  /**\n   * Initializes node attributes.\n   *\n   * @param node SVG element that represents node.\n   * @private\n   */\n  _initNode: function(node) {\n    node\n      .classed(\"node-leaf\", function(d) { return d.isLeaf; })\n      .classed(\"node-parent\", function(d) { return !d.isLeaf; });\n  },\n\n\n  radius: function(_) {\n    if( ! arguments.length ) {\n      return this._radius;\n    }\n\n    if( _ === \"_COUNT\" ) {\n      this._radius = function(d) {\n        if( d._children ) {\n          return d._children.length;\n        } else if( d.children ) {\n          return d.children.length;\n        }\n        return 1;\n      };\n\n    } else {\n      this._radius = _;\n    }\n\n    this.trigger(\"change:radius\");\n    if( this.root ) {\n      this.draw(this.root);\n    }\n\n    return this;\n  },\n\n\n\n  collapsible: function(_) {\n    var chart = this;\n\n    if (this._isFeatureEnabled('collapsible')) {\n      return;\n    }\n\n    this._setFeatureEnabled('collapsible', true);\n\n    var depth = _;\n\n    chart.once(\"collapse:init\", function() {\n\n      if( depth !== undefined ) {\n\n        chart.walker(\n\n          chart.root,\n\n          function(d) { if( d.depth == depth ) { collapse(d); }},\n\n          function(d) {\n            if( d.children && d.children.length > 0 && d.depth < depth ) {\n              return d.children;\n            } else if( d._children && d._children.length > 0 && d.depth < depth ) {\n              return d._children;\n            } else {\n              return null;\n            }\n          }\n        );\n      }\n    });\n\n\n    chart.on(\"click:node\", function(d) {\n      d = toggle(d);\n\n      chart.trigger(\"transform:stash\");\n\n      // Set _internalUpdate, so chart will know that certain actions shouldn't\n      // be performed during update.\n      chart._internalUpdate = true;\n      chart.draw(d);\n      chart._internalUpdate = false;\n    });\n\n\n    function toggle(d) {\n      if( d.children ) {\n        d._children = d.children;\n        d.children = null;\n      } else if( d._children ) {\n        d.children = d._children;\n        d._children = null;\n      }\n      return d;\n    }\n\n\n    function collapse(d) {\n      if( d.children ) {\n        d._children = d.children;\n        d._children.forEach(collapse);\n        d.children = null;\n      }\n    }\n\n    return chart;\n  }\n});\n\n\n","import * as d3 from 'd3';\nimport 'd3.chart';\nimport './cluster-tree';\n\nd3.chart(\"cluster-tree\").extend(\"cluster-tree.cartesian\", {\n\n  initialize : function() {\n\n    var chart = this;\n\n    chart.margin(chart._margin || {});\n    chart.levelGap(chart._levelGap || \"auto\");\n\n    chart.d3.diagonal = d3.svg.diagonal().projection(function(d) { return [d.y, d.x]; });\n\n\n    chart.layers.nodes.on(\"enter\", function() {\n      this\n        .attr(\"transform\", function(d) { return \"translate(\" + chart.source.y0 + \",\" + chart.source.x0 + \")\"; });\n\n      this.select(\"text\")\n        .attr(\"x\", function(d) { return d.children || d._children ? -10 : 10; })\n        .attr(\"text-anchor\", function(d) { return d.children || d._children ? \"end\" : \"start\"; });\n    });\n\n\n    chart.layers.nodes.on(\"merge:transition\", function() {\n      this.duration(chart._duration)\n        .attr(\"transform\", function(d) { return \"translate(\" + d.y + \",\" + d.x + \")\"; });\n    });\n\n    chart.layers.nodes.on(\"exit:transition\", function() {\n      this\n        .attr(\"transform\", function(d) { return \"translate(\" + chart.source.y + \",\" + chart.source.x + \")\"; });\n    });\n\n\n    chart.on(\"change:margin\", function() {\n      chart._width  = chart.base.attr(\"width\")  - chart._margin.left - chart._margin.right;\n      chart._height = chart.base.attr(\"height\") - chart._margin.top  - chart._margin.bottom;\n      chart.base.attr(\"transform\", \"translate(\" + chart._margin.left + \",\" + chart._margin.top + \")\");\n    });\n  },\n\n\n\n  transform: function(root) {\n    var chart = this,\n        nodes;\n\n    chart.source = root;\n\n    if (!chart._internalUpdate) {\n      chart.root    = root;\n      chart.root.x0 = chart._height / 2;\n      chart.root.y0 = 0;\n\n      nodes = chart._getNodes();\n\n      chart.trigger(\"collapse:init\");\n    }\n\n    nodes = chart._getNodes().reverse();\n\n    // Before we proceed, mark leaf nodes\n    nodes.forEach(function (d) {\n      d.isLeaf = !d.children && !d._children;\n    });\n\n    //console.log(nodes);\n\n    // Adjust gap between node levels.\n    if (chart._levelGap && chart._levelGap !== \"auto\") {\n      nodes.forEach(function (d) { d.y = d.depth * chart._levelGap; });\n    }\n\n    chart.on(\"transform:stash\", function() {\n      nodes.forEach(function(d) {\n        d.x0 = d.x;\n        d.y0 = d.y;\n      });\n    });\n\n    return nodes;\n  },\n\n\n  margin: function(_) {\n    if( ! arguments.length ) {\n      return this._margin;\n    }\n\n    [\"top\", \"right\", \"bottom\", \"left\"].forEach(function(dimension) {\n      if( dimension in _ ) {\n        this[dimension] = _[dimension];\n      }\n    }, this._margin = { top: 0, right: 0, bottom: 0, left: 0 });\n\n    this.trigger(\"change:margin\");\n    if( this.root ) {\n      this.draw(this.root);\n    }\n\n    return this;\n  },\n\n\n  /**\n   * Sets a gap between node levels. Acceps eithe number of pixels or string\n   * \"auto\". When level gap set to \"auto\", gap between node levels will be\n   * maximized, so the tree takes full width.\n   *\n   * @param value\n   * @returns {*}\n   */\n  levelGap: function(value) {\n    if (!arguments.length) {\n      return this._levelGap;\n    }\n\n    this._levelGap = value;\n    this.trigger(\"change:levelGap\");\n\n    if (this.root) {\n      this.draw(this.root);\n    }\n\n    return this;\n  },\n\n  nodeSize: function (value) {\n    var chart = this;\n\n    if (!arguments.length) {\n      return chart._nodeSize;\n    }\n\n    if (chart._nodeSize !== value) {\n      chart._nodeSize = value;\n      chart.trigger('change:nodeSize');\n\n      if (chart.root) {\n        chart.draw(chart.root);\n      }\n    }\n\n    return chart;\n  },\n\n  _getNodes: function(nodes) {\n    var chart = this;\n    if (chart._nodeSize) {\n      nodes = chart.d3.layout\n        .nodeSize(chart._nodeSize)\n        .nodes(chart.root); // workaround for getting correct chart.root to transform method in hierarchy.js\n    } else {\n      nodes = chart.d3.layout\n        .size([chart._height, chart._width])\n        .nodes(chart.root); // workaround for getting correct chart.root to transform method in hierarchy.js\n    }\n    return nodes;\n  },\n\n});\n\n\n","import * as d3 from 'd3';\nimport 'd3.chart';\nimport '../hierarchy/cluster-tree.cartesian';\n\nd3.chart(\"cluster-tree.cartesian\").extend(\"tree.cartesian\", {\n\n  initialize : function() {\n    this.d3.layout = d3.layout.tree();\n  }\n});\n","import * as d3 from 'd3';\nimport 'd3.chart';\nimport './cluster-tree';\n\nd3.chart(\"cluster-tree\").extend(\"cluster-tree.radial\", {\n\n  initialize : function() {\n\n    var chart = this;\n\n    chart.diameter(chart._diameter || Math.min(chart._width, chart._height));\n\n    chart.d3.diagonal = d3.svg.diagonal.radial().projection(function(d) { return [d.y, d.x / 180 * Math.PI]; });\n    chart.d3.zoom.translate([chart._diameter / 2, chart._diameter / 2]);\n\n    chart.layers.base\n      .attr(\"transform\", \"translate(\" + chart._diameter / 2 + \",\" + chart._diameter / 2 + \")\");\n\n\n    chart.layers.nodes.on(\"enter\", function() {\n      this\n        .attr(\"transform\", function(d) { return \"rotate(\" + (chart.source.x0 - 90) + \")translate(\" + chart.source.y0 + \")\"; });\n\n      this.select(\"text\")\n        .attr(\"text-anchor\", function(d) { return d.x < 180 ? \"start\" : \"end\"; })\n        .attr(\"transform\",   function(d) { return d.x < 180 ? \"translate(8)\" : \"rotate(180)translate(-8)\"; });\n    });\n\n    chart.layers.nodes.on(\"merge:transition\", function() {\n      this.duration(chart._duration)\n        .attr(\"transform\", function(d) { return \"rotate(\" + (d.x - 90) + \")translate(\" + d.y + \")\"; });\n    });\n\n    chart.layers.nodes.on(\"exit:transition\", function() {\n      this\n        .attr(\"transform\", function(d) { return \"rotate(\" + (chart.source.x - 90) + \")translate(\" + chart.source.y + \")\"; });\n    });\n  },\n\n\n  transform: function(root) {\n    var chart = this,\n        nodes;\n    chart.source = root;\n\n    if(!chart._internalUpdate) {\n      chart.root    = root;\n      chart.root.x0 = 360;\n      chart.root.y0 = 0;\n\n      nodes = chart.d3.layout\n        .size([360, chart._diameter / 4])\n        .separation(function(a, b) {\n            if( a.depth === 0 ) {\n               return 1;\n            } else {\n              return (a.parent == b.parent ? 1 : 2) / a.depth;\n            }\n        }) // workaround\n        .nodes(chart.root);\n\n      chart.trigger(\"collapse:init\");\n    }\n\n    nodes = chart.d3.layout.nodes(chart.root).reverse();\n\n    //nodes.forEach(function(d) { d.y = d.depth * 180; });\n\n    chart.on(\"transform:stash\", function() {\n      nodes.forEach(function(d) {\n        d.x0 = d.x;\n        d.y0 = d.y;\n      });\n    });\n\n    return nodes;\n  },\n\n\n  diameter: function(_) {\n    if( ! arguments.length ) {\n      return this._diameter;\n    }\n\n    this._diameter = _;\n\n    this.trigger(\"change:diameter\");\n    if( this.root ) {\n      this.draw(this.root);\n    }\n\n    return this;\n  }\n});\n\n\n","import * as d3 from 'd3';\nimport 'd3.chart';\nimport '../hierarchy/cluster-tree.radial';\n\nd3.chart(\"cluster-tree.radial\").extend(\"tree.radial\", {\n\n  initialize : function() {\n    this.d3.layout = d3.layout.tree();\n  }\n});\n","import * as d3 from 'd3';\nimport 'd3.chart';\nimport '../hierarchy/hierarchy';\n\nd3.chart(\"hierarchy\").extend(\"treemap\", {\n\n  initialize : function() {\n\n    var chart = this;\n\n    chart.d3.layout = d3.layout.treemap();\n\n    chart._width  = chart.base.attr(\"width\");\n    chart._height = chart.base.attr(\"height\");\n\n    var color = d3.scale.category20c();\n\n    chart.layer(\"base\", chart.layers.base, {\n\n      dataBind: function(data) {\n        return this.selectAll(\".cell\").data(data);\n      },\n\n      insert: function() {\n        return this.append(\"g\").classed(\"cell\", true)\n          .attr(\"transform\", function(d) { return \"translate(\" + d.x + \",\" + d.y + \")\"; });\n      },\n\n      events: {\n        enter: function() {\n\n          this.append(\"rect\")\n            .attr(\"width\", function(d) { return d.dx; })\n            .attr(\"height\", function(d) { return d.dy; })\n            .attr(\"fill\", function(d) { return d.parent ? color(d.parent[chart._name]) : null; });\n\n          this.append(\"text\")\n            .attr(\"x\", function(d) { return d.dx / 2; })\n            .attr(\"y\", function(d) { return d.dy / 2; })\n            .attr(\"dy\", \".35em\")\n            .attr(\"text-anchor\", \"middle\")\n            .text(function(d) { return d.children ? null : d[chart._name]; }) // order is matter! getComputedTextLength\n            .style(\"opacity\", function(d) { d.w = this.getComputedTextLength(); return d.dx > d.w ? 1 : 0; });\n\n          this.on(\"click\", function(event) {\n            chart.trigger(\"click:node\", event);\n          });\n        }\n      }\n    });\n  },\n\n\n  transform: function(root) {\n    var chart  = this;\n\n    chart.root = root;\n\n    return chart.d3.layout\n      .round(false)\n      .size([chart._width, chart._height])\n      .sticky(true)\n      .nodes(root);\n  },\n\n\n  collapsible: function() {\n    var chart = this;\n\n    var node,\n        x = d3.scale.linear().range([0, chart._width]),\n        y = d3.scale.linear().range([0, chart._height]);\n\n    chart.layers.base.on(\"merge\", function() {\n      node = chart.root;\n      chart.on(\"click:node\", function(d) { collapse(node == d.parent ? chart.root : d.parent); });\n    });\n\n    //chart.base.on(\"click\", function() { collapse(chart.root); });\n\n\n    function collapse(d) {\n      var kx = chart._width  / d.dx,\n          ky = chart._height / d.dy;\n\n      x.domain([d.x, d.x + d.dx]);\n      y.domain([d.y, d.y + d.dy]);\n\n      var t = chart.layers.base.transition()\n        .duration(chart._duration);\n\n      t.selectAll(\".cell\")\n        .attr(\"transform\", function(d) { return \"translate(\" + x(d.x) + \",\" + y(d.y) + \")\"; });\n\n      t.selectAll(\"rect\")\n        .attr(\"width\",  function(d) { return kx * d.dx; })\n        .attr(\"height\", function(d) { return ky * d.dy; });\n\n      t.selectAll(\"text\")\n        .attr(\"x\", function(d) { return kx * d.dx / 2; })\n        .attr(\"y\", function(d) { return ky * d.dy / 2; })\n        .style(\"opacity\", function(d) { return kx * d.dx > d.w ? 1 : 0; });\n\n      node = d;\n    }\n\n    return chart;\n  }\n});\n\n\n","import * as d3 from 'd3';\nimport 'd3.chart';\nimport '../hierarchy/hierarchy';\n\nd3.chart(\"hierarchy\").extend(\"pack.flattened\", {\n\n  initialize : function() {\n\n    var chart = this;\n\n    chart.d3.layout = d3.layout.pack();\n\n    chart._width  = chart.base.attr(\"width\");\n    chart._height = chart.base.attr(\"height\");\n\n    chart.flatten(chart._flatten   || null);\n    chart.formats(chart._formats   || {});\n    chart.diameter(chart._diameter || Math.min(chart._width, chart._height));\n\n    chart.d3.zoom.translate([(chart._width - chart._diameter) / 2, (chart._height - chart._diameter) / 2]);\n\n    chart.layers.base\n      .attr(\"transform\", \"translate(\" + (chart._width - chart._diameter) / 2 + \",\" + (chart._height - chart._diameter) / 2 + \")\");\n\n\n    chart.layer(\"base\", chart.layers.base, {\n\n      dataBind: function(data) {\n        return this.selectAll(\".node\").data(data.filter(function(d) { return ! d.children; }));\n      },\n\n      insert: function() {\n        return this.append(\"g\");\n      },\n\n      events: {\n        \"enter\": function() {\n\n          this.attr(\"transform\", function(d) { return \"translate(\" + d.x + \",\" + d.y + \")\"; });\n\n          this.append(\"circle\")\n            .attr(\"r\", function(d) { return d.r; })\n            .style(\"stroke\", \"#aaa\")\n            .style(\"fill\", chart._formats.fill);\n\n          this.append(\"text\")\n            .attr(\"dy\", \".3em\")\n            .style(\"text-anchor\", \"middle\")\n            .text(function(d) { return d[chart._name].substring(0, d.r / 3); });\n\n          this.append(\"title\")\n            .text(chart._formats.title);\n\n          this.on(\"click\", function(event) {\n            chart.trigger(\"click:node\", event);\n          });\n        }\n      }\n    });\n\n    chart.on(\"change:diameter\", function() {\n      chart.layers.base\n        .attr(\"transform\", \"translate(\" + (chart._width - chart._diameter) / 2 + \",\" + (chart._height - chart._diameter) / 2 + \")\");\n    });\n  },\n\n\n\n  transform: function(root) {\n    var chart = this;\n\n    chart.root = root;\n\n    return chart.d3.layout\n      .size([chart._diameter, chart._diameter])\n      .sort(null)\n      .padding(1.5)\n      .nodes(chart._flatten ? chart._flatten(root) : root);\n  },\n\n\n  diameter: function(_) {\n    if( ! arguments.length ) {\n      return this._diameter;\n    }\n\n    this._diameter = _ - 10;\n\n    this.trigger(\"change:diameter\");\n    if( this.root ) {\n      this.draw(this.root);\n    }\n\n    return this;\n  },\n\n\n  flatten: function(_) {\n    if( ! arguments.length ) {\n      return this._flatten;\n    }\n\n    this._flatten = _;\n\n    this.trigger(\"change:flatten\");\n    if( this.root ) {\n      this.draw(this.root);\n    }\n\n    return this;\n  },\n\n\n  formats: function(_) {\n    if( ! arguments.length ) {\n      return this._formats;\n    }\n\n    var chart = this;\n\n    var color = d3.scale.category20c();\n\n    [\"title\", \"fill\"].forEach(function(format) {\n      if( format in _ ) {\n        this[format] = d3.functor(_[format]);\n      }\n    }, this._formats = {\n       title : function(d) { return d[chart._value]; },\n       fill  : function(d) { return color(d[chart._name]); }\n      }\n    );\n\n    chart.trigger(\"change:formats\");\n    if( chart.root ) {\n      chart.draw(chart.root);\n    }\n\n    return chart;\n  }\n});\n\n\n","import * as d3 from 'd3';\nimport 'd3.chart';\nimport '../hierarchy/hierarchy';\n\nd3.chart(\"hierarchy\").extend(\"pack.nested\", {\n\n  initialize : function() {\n    var chart = this;\n\n    chart.d3.layout = d3.layout.pack();\n\n    chart._width  = chart.base.attr(\"width\");\n    chart._height = chart.base.attr(\"height\");\n    chart.diameter(chart._diameter || Math.min(chart._width, chart._height));\n\n    chart.d3.zoom.translate([(chart._width - chart._diameter) / 2, (chart._height - chart._diameter) / 2]);\n\n    chart.layers.base\n      .attr(\"transform\", \"translate(\" + (chart._width - chart._diameter) / 2 + \",\" + (chart._height - chart._diameter) / 2 + \")\");\n\n\n    chart.layer(\"base\", chart.layers.base, {\n\n      dataBind: function(data) {\n        return this.selectAll(\".node\").data(data);\n      },\n\n      insert: function() {\n        return this.append(\"g\");\n      },\n\n      events: {\n        enter: function() {\n\n          this.attr(\"transform\", function(d) { return \"translate(\" + d.x + \",\" + d.y + \")\"; });\n\n          this.append(\"circle\")\n            .attr(\"r\", function(d) { return d.r; });\n\n          this.append(\"text\")\n            .attr(\"dy\", \".3em\")\n            .style(\"text-anchor\", \"middle\");\n\n          this.on(\"click\", function (event) {\n            chart.trigger(\"click:node\", event);\n          });\n        },\n\n        merge: function() {\n\n          this.attr(\"class\", function(d) { return d.children ? \"node parent\" : \"node child\"; });\n\n          this.select(\"text\")\n            .style(\"opacity\", function(d) { return d.r > 20 ? 1 : 0; })\n            .text(function(d) { return d[chart._name]; });\n        }\n      }\n    });\n\n\n    chart.on(\"change:diameter\", function() {\n      chart.layers.base\n        .attr(\"transform\", \"translate(\" + (chart._width - chart._diameter) / 2 + \",\" + (chart._height - chart._diameter) / 2 + \")\");\n    });\n  },\n\n\n  transform: function(root) {\n    var chart = this;\n\n    chart.root = root;\n\n    return chart.d3.layout\n      .size([chart._diameter, chart._diameter])\n      .nodes(root);\n  },\n\n\n  diameter: function(_) {\n    if( ! arguments.length ) {\n      return this._diameter;\n    }\n\n    this._diameter = _ - 10;\n\n    this.trigger(\"change:diameter\");\n    if( this.root ) {\n      this.draw(this.root);\n    }\n\n    return this;\n  },\n\n\n  collapsible: function() {\n    var chart = this;\n\n    var node,\n        x = d3.scale.linear().range([0, chart._diameter]),\n        y = d3.scale.linear().range([0, chart._diameter]);\n\n\n    chart.layers.base.on(\"merge\", function() {\n      node = chart.root;\n      chart.on(\"click:node\", function(d) {\n        collapse(node == d ? chart.root : d);\n      });\n    });\n\n\n    function collapse(d) {\n      var k = chart._diameter / d.r / 2;\n\n      x.domain([d.x - d.r, d.x + d.r]);\n      y.domain([d.y - d.r, d.y + d.r]);\n\n      var t = chart.layers.base.transition()\n        .duration(chart._duration);\n\n      t.selectAll(\".node\")\n        .attr(\"transform\", function(d) { return \"translate(\" + x(d.x) + \",\" + y(d.y) + \")\"; });\n\n      t.selectAll(\"circle\")\n        .attr(\"r\", function(d) { return k * d.r; });\n\n      t.selectAll(\"text\")\n        .style(\"opacity\", function(d) { return k * d.r > 20 ? 1 : 0; });\n\n      node = d;\n    }\n\n    return chart;\n  }\n});\n\n\n","import * as d3 from 'd3';\nimport 'd3.chart';\nimport '../hierarchy/hierarchy';\n\nd3.chart(\"hierarchy\").extend(\"partition.arc\", {\n\n  initialize : function() {\n\n    var chart = this;\n\n    chart.d3.layout = d3.layout.partition();\n\n    chart._width  = chart.base.attr(\"width\");\n    chart._height = chart.base.attr(\"height\");\n\n    chart.diameter(chart._diameter || Math.min(chart._width, chart._height));\n\n\n    chart.d3.color = d3.scale.category20c();\n    chart.d3.x     = d3.scale.linear().range([0, 2 * Math.PI]);\n    chart.d3.y     = d3.scale.sqrt().range([0, chart._diameter / 2]);\n    chart.d3.arc   = d3.svg.arc()\n      .startAngle(function(d)  { return Math.max(0, Math.min(2 * Math.PI, chart.d3.x(d.x))); })\n      .endAngle(function(d)    { return Math.max(0, Math.min(2 * Math.PI, chart.d3.x(d.x + d.dx))); })\n      .innerRadius(function(d) { return Math.max(0, chart.d3.y(d.y)); })\n      .outerRadius(function(d) { return Math.max(0, chart.d3.y(d.y + d.dy)); });\n\n    chart.d3.zoom.translate([chart.base.attr(\"width\") / 2, chart.base.attr(\"height\") / 2]);\n\n    chart.layers.base\n      .attr(\"transform\", \"translate(\" + chart.base.attr(\"width\") / 2 + \",\" + chart.base.attr(\"height\") / 2 + \")\");\n\n\n    chart.layer(\"base\", chart.layers.base, {\n\n      dataBind: function(data) {\n        return this.selectAll(\"path\").data(data);\n      },\n\n      insert: function() {\n        return this.append(\"path\");\n      },\n\n      events: {\n        enter: function() {\n          this.attr(\"d\", chart.d3.arc)\n            .style(\"fill\", function(d) { return chart.d3.color((d.children ? d : d.parent)[chart._name]); });\n\n          this.on(\"click\", function(event) {\n            chart.trigger(\"click:node\", event);\n          });\n        }\n      }\n    });\n\n\n    chart.on(\"change:radius\", function() {\n      chart.layers.paths\n        .attr(\"transform\", \"translate(\" + chart.base.attr(\"width\") / 2 + \",\" + chart.base.attr(\"height\") / 2 + \")\");\n      chart.d3.y = d3.scale.sqrt().range([0, chart._diameter / 2]);\n    });\n  },\n\n\n\n  transform: function(root) {\n    var chart = this;\n\n    chart.root = root;\n\n    return chart.d3.layout.nodes(root);\n  },\n\n\n  diameter: function(_) {\n    if( ! arguments.length ) {\n      return this._diameter;\n    }\n\n    this._diameter = _ - 10;\n\n    this.trigger(\"change:radius\");\n    if( this.root ) {\n      this.draw(this.root);\n    }\n\n    return this;\n  },\n\n\n  collapsible: function() {\n    var chart = this;\n\n    chart.layers.base.on(\"merge\", function() {\n      var path = this;\n      chart.on(\"click:node\", function(d) {\n          path.transition()\n            .duration(chart._duration)\n            .attrTween(\"d\", arcTween(d));\n        });\n    });\n\n    function arcTween(d) {\n      var xd = d3.interpolate(chart.d3.x.domain(), [d.x, d.x + d.dx]),\n          yd = d3.interpolate(chart.d3.y.domain(), [d.y, 1]),\n          yr = d3.interpolate(chart.d3.y.range(),  [d.y ? 20 : 0, chart._diameter / 2]);\n\n      return function(d, i) {\n        return i ? function(t) { return chart.d3.arc(d); }\n                 : function(t) { chart.d3.x.domain(xd(t)); chart.d3.y.domain(yd(t)).range(yr(t)); return chart.d3.arc(d); };\n      };\n    }\n\n    return chart;\n  }\n});\n\n","import * as d3 from 'd3';\nimport 'd3.chart';\nimport '../hierarchy/hierarchy';\n\nd3.chart(\"hierarchy\").extend(\"partition.rectangle\", {\n\n  initialize : function() {\n\n    var chart = this;\n\n    chart.d3.layout = d3.layout.partition();\n\n    chart._width  = chart.base.attr(\"width\");\n    chart._height = chart.base.attr(\"height\");\n\n\n    var x = d3.scale.linear().range([0, chart._width]),\n        y = d3.scale.linear().range([0, chart._height]);\n\n    chart.d3.transform = function(d, ky) { return \"translate(8,\" + d.dx * ky / 2 + \")\"; };\n\n\n    chart.layer(\"base\", chart.layers.base, {\n\n      dataBind: function(data) {\n        return this.selectAll(\".partition\").data(data);\n      },\n\n      insert: function() {\n        return this.append(\"g\").classed(\"partition\", true)\n          .attr(\"transform\", function(d) { return \"translate(\" + x(d.y) + \",\" + y(d.x) + \")\"; });\n      },\n\n      events: {\n        enter: function() {\n          var kx = chart._width  / chart.root.dx,\n              ky = chart._height / 1;\n\n          this.append(\"rect\")\n            .attr(\"class\", function(d) { return d.children ? \"parent\" : \"child\"; })\n            .attr(\"width\", chart.root.dy * kx)\n            .attr(\"height\", function(d) { return d.dx * ky; });\n\n          this.append(\"text\")\n            .attr(\"transform\", function(d) { return chart.d3.transform(d, ky); })\n            .attr(\"dy\", \".35em\")\n            .style(\"opacity\", function(d) { return d.dx * ky > 12 ? 1 : 0; })\n            .text(function(d) { return d[chart._name]; });\n\n          this.on(\"click\", function(event) {\n            chart.trigger(\"click:node\", event);\n          });\n        }\n      }\n    });\n  },\n\n\n\n  transform: function(root) {\n    var chart = this;\n\n    chart.root = root;\n\n    return chart.d3.layout.nodes(root);\n  },\n\n\n  collapsible: function() {\n    var chart = this;\n\n    var node,\n        x = d3.scale.linear(),\n        y = d3.scale.linear().range([0, chart._height]);\n\n    chart.layers.base.on(\"merge\", function() {\n      node = chart.root;\n      chart.on(\"click:node\", function(d) {\n        collapse(node == d ? chart.root : d);\n      });\n    });\n\n    //chart.base.on(\"click\", function() { collapse(chart.root); });\n\n\n    function collapse(d) {\n      var kx = (d.y ? chart._width - 40 : chart._width) / (1 - d.y),\n          ky = chart._height / d.dx;\n\n      x.domain([d.y, 1]).range([d.y ? 40 : 0, chart._width]);\n      y.domain([d.x, d.x + d.dx]);\n\n      var t = chart.layers.base.transition()\n        .duration(chart._duration);\n\n      t.selectAll(\".partition\")\n        .attr(\"transform\", function(d) { return \"translate(\" + x(d.y) + \",\" + y(d.x) + \")\"; });\n\n      t.selectAll(\"rect\")\n        .attr(\"width\", d.dy * kx)\n        .attr(\"height\", function(d) { return d.dx * ky; });\n\n      t.selectAll(\"text\")\n        .attr(\"transform\", function(d) { return chart.d3.transform(d, ky); })\n        .style(\"opacity\",  function(d) { return d.dx * ky > 12 ? 1 : 0; });\n\n      node = d;\n    }\n\n    return chart;\n  }\n});\n\n\n"],"sourceRoot":""}